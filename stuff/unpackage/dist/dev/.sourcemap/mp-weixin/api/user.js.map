{"version":3,"file":"user.js","sources":["api/user.js"],"sourcesContent":["// 用户相关接口\r\nimport { request, BASE_URL } from './config'\r\n\r\nexport const userApi = {\r\n    // 登录\r\n    login(data) {\r\n        return request({\r\n            url: '/user/login',\r\n            method: 'POST',\r\n            data\r\n        })\r\n    },\r\n    \r\n    // 注册\r\n    register(data) {\r\n        return request({\r\n            url: '/user/register',\r\n            method: 'POST',\r\n            data\r\n        })\r\n    },\r\n    \r\n    // 获取用户信息\r\n    getProfile(userId) {\r\n        return request({\r\n            url: `/user/${userId}/profile`\r\n        })\r\n    },\r\n    \r\n    // 更新用户信息\r\n    updateProfile(userId, data) {\r\n        return request({\r\n            url: `/user/${userId}/profile`,\r\n            method: 'PUT',\r\n            data\r\n        })\r\n    },\r\n    \r\n    // 修改密码\r\n    updatePassword(userId, data) {\r\n        return request({\r\n            url: `/user/${userId}/password`,\r\n            method: 'PUT',\r\n            data\r\n        })\r\n    },\r\n    \r\n    // 上传头像\r\n    uploadAvatar(userId, filePath) {\r\n        return new Promise((resolve, reject) => {\r\n            uni.uploadFile({\r\n                url: `${BASE_URL}/user/${userId}/avatar`,\r\n                filePath: filePath,\r\n                name: 'file',\r\n                header: {\r\n                    'Authorization': uni.getStorageSync('token')\r\n                },\r\n                success: (uploadRes) => {\r\n                    try {\r\n                        // 确保返回的数据是JSON格式\r\n                        const result = typeof uploadRes.data === 'string' \r\n                            ? JSON.parse(uploadRes.data) \r\n                            : uploadRes.data\r\n                        resolve(result)\r\n                    } catch (e) {\r\n                        reject(new Error('解析响应数据失败'))\r\n                    }\r\n                },\r\n                fail: (error) => {\r\n                    reject(error)\r\n                }\r\n            })\r\n        })\r\n    }\r\n} "],"names":["request","uni","BASE_URL"],"mappings":";;;AAGY,MAAC,UAAU;AAAA;AAAA,EAEnB,MAAM,MAAM;AACR,WAAOA,mBAAQ;AAAA,MACX,KAAK;AAAA,MACL,QAAQ;AAAA,MACR;AAAA,IACZ,CAAS;AAAA,EACJ;AAAA;AAAA,EAGD,SAAS,MAAM;AACX,WAAOA,mBAAQ;AAAA,MACX,KAAK;AAAA,MACL,QAAQ;AAAA,MACR;AAAA,IACZ,CAAS;AAAA,EACJ;AAAA;AAAA,EAGD,WAAW,QAAQ;AACf,WAAOA,mBAAQ;AAAA,MACX,KAAK,SAAS,MAAM;AAAA,IAChC,CAAS;AAAA,EACJ;AAAA;AAAA,EAGD,cAAc,QAAQ,MAAM;AACxB,WAAOA,mBAAQ;AAAA,MACX,KAAK,SAAS,MAAM;AAAA,MACpB,QAAQ;AAAA,MACR;AAAA,IACZ,CAAS;AAAA,EACJ;AAAA;AAAA,EAGD,eAAe,QAAQ,MAAM;AACzB,WAAOA,mBAAQ;AAAA,MACX,KAAK,SAAS,MAAM;AAAA,MACpB,QAAQ;AAAA,MACR;AAAA,IACZ,CAAS;AAAA,EACJ;AAAA;AAAA,EAGD,aAAa,QAAQ,UAAU;AAC3B,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpCC,oBAAAA,MAAI,WAAW;AAAA,QACX,KAAK,GAAGC,WAAAA,QAAQ,SAAS,MAAM;AAAA,QAC/B;AAAA,QACA,MAAM;AAAA,QACN,QAAQ;AAAA,UACJ,iBAAiBD,cAAAA,MAAI,eAAe,OAAO;AAAA,QAC9C;AAAA,QACD,SAAS,CAAC,cAAc;AACpB,cAAI;AAEA,kBAAM,SAAS,OAAO,UAAU,SAAS,WACnC,KAAK,MAAM,UAAU,IAAI,IACzB,UAAU;AAChB,oBAAQ,MAAM;AAAA,UACjB,SAAQ,GAAG;AACR,mBAAO,IAAI,MAAM,UAAU,CAAC;AAAA,UAC/B;AAAA,QACJ;AAAA,QACD,MAAM,CAAC,UAAU;AACb,iBAAO,KAAK;AAAA,QACf;AAAA,MACjB,CAAa;AAAA,IACb,CAAS;AAAA,EACJ;AACL;;"}